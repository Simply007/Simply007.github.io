{"version":3,"file":"component---src-templates-listing-page-js-4e3ea0a5e7414161e26d.js","mappings":"uLAmDA,IA/CsBA,GACpBC,EAAAA,cAAA,WACEC,GAAG,SACH,uBAAsBF,EAAMG,OAC5BC,UAAW,QAAQC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,KAElDP,EAAMQ,WACLP,EAAAA,cAACQ,EAAAA,GAAY,CACXC,MAAOV,EAAMQ,UACbG,MAAO,CACLC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,OACPC,OAAQ,QAEVC,SAAU,CACRC,eAAgB,aAKtBjB,EAAAA,cAAA,OAAKG,UAAU,SACbH,EAAAA,cAAA,UAAQG,UAAU,SAChBH,EAAAA,cAAA,MAAI,gCAA+BD,EAAMmB,eACtCnB,EAAMoB,QAGXnB,EAAAA,cAAA,OACEG,UAAU,UACViB,wBAAyB,CAAEC,OAAQtB,EAAMuB,SACzC,gCAA+BvB,EAAMwB,kBAEtCxB,EAAMyB,QACLxB,EAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,cAACyB,EAAAA,KAAI,CACHtB,UAAU,mCACVuB,GAAI3B,EAAMyB,OAAOE,IAEhB3B,EAAMyB,OAAOL,S,0HCkC1B,MA1EoBQ,IAAe,IAAd,KAAEC,GAAMD,EAG3B,OAFiBC,EAAKC,YAGpB,IAAK,sBACH,OACE7B,EAAAA,cAAA,WACE8B,IAAKF,EAAKG,SAASC,SAASC,MAC5B,uBAAsBL,EAAKM,OAAOjC,GAClCS,MAAO,CACLyB,gBACEP,EAAKG,SAAStB,OAASmB,EAAKG,SAAStB,MAAMwB,MAAMG,OAAS,EACtD,QAAQR,EAAKG,SAAStB,MAAMwB,MAAM,GAAGI,QACrC,YAGRrC,EAAAA,cAAA,UAAQG,UAAU,SAChBH,EAAAA,cAAA,MAAI,gCAA8B,SAC/B4B,EAAKG,SAASZ,MAAMc,OAEvBjC,EAAAA,cAAA,OACEoB,wBAAyB,CAAEC,OAAQO,EAAKG,SAASO,QAAQL,OACzD,gCAA8B,UAC9B9B,UAAU,YAEZH,EAAAA,cAAA,MAAIG,UAAU,WACZH,EAAAA,cAAA,UACEA,EAAAA,cAACyB,EAAAA,KAAI,CAACtB,UAAU,cAAcuB,GAAIE,EAAKG,SAASC,SAASC,OAAO,kBAS5E,IAAK,uBACH,OACEjC,EAAAA,cAAA,WACE8B,IAAKF,EAAKG,SAASC,SAASC,MAC5B,uBAAsBL,EAAKM,OAAOjC,GAClCS,MAAO,CACLyB,gBACEP,EAAKG,SAAStB,OAASmB,EAAKG,SAAStB,MAAMwB,MAAMG,OAAS,EACtD,QAAQR,EAAKG,SAAStB,MAAMwB,MAAM,GAAGI,QACrC,UACNE,kBAAmB,QAGrBvC,EAAAA,cAAA,UAAQG,UAAU,SAChBH,EAAAA,cAAA,MAAI,gCAA8B,SAC/B4B,EAAKG,SAASZ,MAAMc,OAEvBjC,EAAAA,cAAA,OACEoB,wBAAyB,CAAEC,OAAQO,EAAKG,SAASO,QAAQL,OACzD,gCAA8B,UAC9B9B,UAAU,YAEZH,EAAAA,cAAA,MAAIG,UAAU,WACZH,EAAAA,cAAA,UACEA,EAAAA,cAACyB,EAAAA,KAAI,CAACtB,UAAU,cAAcuB,GAAIE,EAAKG,SAASC,SAASC,OAAO,kBAW9E,EC/DF,MAAMO,EAAgBA,CAACC,EAAoBC,KAEvCC,EAAAA,EAAAA,GAAIF,GAAoBG,QAAOC,GAC7BH,EAAeI,SAASD,KACxBT,OAAS,EAgOf,MA5NoBT,IAEb,IADLoB,MAAQC,uBAAwBC,EAAUC,eAAgBC,IAC3DxB,EACC,MAAM,EAACc,EAAmB,EAACW,IAAyBC,EAAAA,EAAAA,UAAS,IAAIC,KAE3DC,EAAUJ,EAAYK,MAAMZ,QAChCa,GACsB,wBAApBA,EAAK5B,YACL4B,EAAK1B,SAAS2B,gBAAgBzB,MAC3B0B,KAAIC,GAAKA,EAAEC,WACXf,SAAS,aAGVgB,EAAWX,EAAYK,MAAMZ,QACjCa,GACsB,yBAApBA,EAAK5B,YACL4B,EAAK1B,SAAS2B,gBAAgBzB,MAC3B0B,KAAIC,GAAKA,EAAEC,WACXf,SAAS,aAGViB,EAAQR,EAAQS,OAAOF,GAEvBG,EAAgB,CAAC,EACvB,IAAK,MAAMrC,KAAQmC,EACjB,IAAK,MAAMG,KAAgBtC,EAAKG,SAASoC,iBAAiBlC,MACxDgC,EAAcC,EAAaL,UAAYK,EAI3C,MASME,EATWL,EAAMnB,QAAOhB,GACA,IAA5Ba,EAAmB4B,MAEf7B,EACEC,EACAb,EAAKG,SAASoC,iBAAiBlC,MAAM0B,KAAIW,GAAKA,EAAET,cAKrDjB,QAAOhB,GACsB,IAA5Ba,EAAmB4B,MAEf7B,EACEC,EACAb,EAAKG,SAASoC,iBAAiBlC,MAAM0B,KAAIW,GAAKA,EAAET,cAGvDF,KAAI/B,GAAQ5B,EAAAA,cAACuE,EAAW,CAACzC,IAAKF,EAAKM,OAAO2B,SAAUjC,KAAMA,MAEvD4C,EAAaC,OAAOC,OAAOT,GAC3BU,EAAuBH,EAAWb,KAAId,GAC1C7C,EAAAA,cAAA,MAAI8B,IAAKe,EAASgB,UAChB7D,EAAAA,cAAA,UACEG,UAAW,UACTsC,EAAmBmC,IAAI/B,EAASgB,UAAY,UAAY,IAE1D,yBAAwBhB,EAASgB,SACjCgB,QAASA,IACPzB,GAAsBX,IACpB,GAAIA,EAAmBmC,IAAI/B,EAASgB,UAAW,CAC7C,MAAMiB,EAAS,IAAIxB,IAAIb,GAEvB,OADAqC,EAAOC,OAAOlC,EAASgB,UAChBiB,CACT,CACE,OAAO,IAAIxB,IAAIb,EAAmBuC,IAAInC,EAASgB,UACjD,KAIHhB,EAASoC,SAoBhB,OAfAN,EAAqBO,QACnBlF,EAAAA,cAAA,MAAI8B,IAAI,QACN9B,EAAAA,cAAA,UACE6E,QAASA,IAAMzB,EAAsB,IAAIE,KACzCnD,UAAW,UACmB,IAA5BsC,EAAmB4B,KACf,mBACA,0BAGuB,IAA5B5B,EAAmB4B,KAAa,MAAQ,WAM7CrE,EAAAA,cAACmF,EAAAA,EAAM,KACLnF,EAAAA,cAACoF,EAAAA,EAAa,CACZjE,MAAO8B,EAASlB,SAASsD,aAAapD,MACtCX,QAAS2B,EAASlB,SAASuD,eAAerD,MAC1C1B,UACE0C,EAASlB,SAASwD,WAAWtD,MAAMG,OAAS,EACxCa,EAASlB,SAASwD,WAAWtD,MAAM,QACnCuD,IAGRxF,EAAAA,cAAA,OAAKG,UAAU,WACZqE,EAAWpC,OAAS,GACnBpC,EAAAA,cAAA,OAAKG,UAAU,SACbH,EAAAA,cAAA,UAAQG,UAAU,SAChBH,EAAAA,cAAA,UAAI,cACJA,EAAAA,cAAA,MAAIG,UAAU,cAAcwE,KAIlC3E,EAAAA,cAAA,WAASG,UAAU,SAASiE,IAEvB,C","sources":["webpack://ondrej-chrastina-personal-site/./src/components/BannerLanding.js","webpack://ondrej-chrastina-personal-site/./src/components/ListingItem.js","webpack://ondrej-chrastina-personal-site/./src/templates/listing-page.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { ImageElement } from '@kentico/gatsby-kontent-components'\n\nconst BannerLanding = props => (\n  <section\n    id=\"banner\"\n    data-kontent-item-id={props.itemId}\n    className={`style${Math.floor(Math.random() * 6) + 1}`}\n  >\n    {props.heroImage && (\n      <ImageElement\n        image={props.heroImage}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          width: '100%',\n          height: '100%',\n        }}\n        imgStyle={{\n          objectPosition: '75% 25%',\n        }}\n      />\n    )}\n\n    <div className=\"inner\">\n      <header className=\"major\">\n        <h1 data-kontent-element-codename={props.titleCodename}>\n          {props.title}\n        </h1>\n      </header>\n      <div\n        className=\"content\"\n        dangerouslySetInnerHTML={{ __html: props.content }}\n        data-kontent-element-codename={props.contentCodename}\n      ></div>\n      {props.button && (\n        <div className=\"content\">\n          <Link\n            className=\"button icon fa-angle-double-left\"\n            to={props.button.to}\n          >\n            {props.button.title}\n          </Link>\n        </div>\n      )}\n    </div>\n  </section>\n)\n\nexport default BannerLanding\n","import { Link } from 'gatsby'\r\nimport React from 'react'\r\n\r\nconst ListingItem = ({ item }) => {\r\n  const itemType = item.__typename\r\n\r\n  switch (itemType) {\r\n    case 'kontent_item_gotcha':\r\n      return (\r\n        <article\r\n          key={item.elements.url_slug.value}\r\n          data-kontent-item-id={item.system.id}\r\n          style={{\r\n            backgroundImage:\r\n              item.elements.image && item.elements.image.value.length > 0\r\n                ? `url(\"${item.elements.image.value[0].url}\")`\r\n                : 'initial',\r\n          }}\r\n        >\r\n          <header className=\"major\">\r\n            <h3 data-kontent-element-codename=\"title\">\r\n              {item.elements.title.value}\r\n            </h3>\r\n            <div\r\n              dangerouslySetInnerHTML={{ __html: item.elements.summary.value }}\r\n              data-kontent-element-codename=\"summary\"\r\n              className=\"summary\"\r\n            />\r\n            <ul className=\"actions\">\r\n              <li>\r\n                <Link className=\"button next\" to={item.elements.url_slug.value}>\r\n                  Learn more\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </header>\r\n        </article>\r\n      )\r\n\r\n    case 'kontent_item_project': {\r\n      return (\r\n        <article\r\n          key={item.elements.url_slug.value}\r\n          data-kontent-item-id={item.system.id}\r\n          style={{\r\n            backgroundImage:\r\n              item.elements.image && item.elements.image.value.length > 0\r\n                ? `url(\"${item.elements.image.value[0].url}\")`\r\n                : 'initial',\r\n            backgroundOpacity: '0.2',\r\n          }}\r\n        >\r\n          <header className=\"major\">\r\n            <h3 data-kontent-element-codename=\"title\">\r\n              {item.elements.title.value}\r\n            </h3>\r\n            <div\r\n              dangerouslySetInnerHTML={{ __html: item.elements.summary.value }}\r\n              data-kontent-element-codename=\"summary\"\r\n              className=\"summary\"\r\n            />\r\n            <ul className=\"actions\">\r\n              <li>\r\n                <Link className=\"button next\" to={item.elements.url_slug.value}>\r\n                  Learn more\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </header>\r\n        </article>\r\n      )\r\n    }\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default ListingItem\r\n","import React, { useState } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../components/layout'\r\nimport BannerLanding from '../components/BannerLanding'\r\nimport ListingItem from '../components/ListingItem'\r\n\r\n/**\r\n * Check if there is an intersect in the following Set and array\r\n * @param {Set<String>} selectedCategories - selected categories\r\n * @param {Array<String>} itemCategories - categories you want to verify against\r\n */\r\nconst categorySuits = (selectedCategories, itemCategories) => {\r\n  return (\r\n    [...selectedCategories].filter(category =>\r\n      itemCategories.includes(category)\r\n    ).length > 0\r\n  )\r\n}\r\n\r\nconst ListingPage = ({\r\n  data: { kontentItemListingPage: pageData, allKontentItem: listingData },\r\n}) => {\r\n  const [selectedCategories, setSelectedCategories] = useState(new Set())\r\n\r\n  const gotchas = listingData.nodes.filter(\r\n    node =>\r\n      node.__typename === 'kontent_item_gotcha' &&\r\n      node.elements.channel_purpose.value\r\n        .map(i => i.codename)\r\n        .includes('website')\r\n  )\r\n\r\n  const projects = listingData.nodes.filter(\r\n    node =>\r\n      node.__typename === 'kontent_item_project' &&\r\n      node.elements.channel_purpose.value\r\n        .map(i => i.codename)\r\n        .includes('website')\r\n  )\r\n\r\n  const items = gotchas.concat(projects)\r\n\r\n  const allCategories = {}\r\n  for (const item of items) {\r\n    for (const itemCategory of item.elements.listing_category.value) {\r\n      allCategories[itemCategory.codename] = itemCategory\r\n    }\r\n  }\r\n\r\n  const allItems = items.filter(item =>\r\n    selectedCategories.size === 0\r\n      ? true\r\n      : categorySuits(\r\n          selectedCategories,\r\n          item.elements.listing_category.value.map(c => c.codename)\r\n        )\r\n  )\r\n\r\n  const listingOverview = allItems\r\n    .filter(item =>\r\n      selectedCategories.size === 0\r\n        ? true\r\n        : categorySuits(\r\n            selectedCategories,\r\n            item.elements.listing_category.value.map(c => c.codename)\r\n          )\r\n    )\r\n    .map(item => <ListingItem key={item.system.codename} item={item} />)\r\n\r\n  const categories = Object.values(allCategories)\r\n  const categoriesComponents = categories.map(category => (\r\n    <li key={category.codename}>\r\n      <button\r\n        className={`button${\r\n          selectedCategories.has(category.codename) ? ' toggle' : ''\r\n        }`}\r\n        data-category-codename={category.codename}\r\n        onClick={() =>\r\n          setSelectedCategories(selectedCategories => {\r\n            if (selectedCategories.has(category.codename)) {\r\n              const result = new Set(selectedCategories)\r\n              result.delete(category.codename)\r\n              return result\r\n            } else {\r\n              return new Set(selectedCategories.add(category.codename))\r\n            }\r\n          })\r\n        }\r\n      >\r\n        {category.name}\r\n      </button>\r\n    </li>\r\n  ))\r\n\r\n  categoriesComponents.unshift(\r\n    <li key=\"#ALL\">\r\n      <button\r\n        onClick={() => setSelectedCategories(new Set())}\r\n        className={`button${\r\n          selectedCategories.size === 0\r\n            ? ' disabled toggle'\r\n            : ' icon fa-times-circle'\r\n        }`}\r\n      >\r\n        {selectedCategories.size === 0 ? 'ALL' : 'CLEAR'}\r\n      </button>\r\n    </li>\r\n  )\r\n\r\n  return (\r\n    <Layout>\r\n      <BannerLanding\r\n        title={pageData.elements.primary_text.value}\r\n        content={pageData.elements.secondary_text.value}\r\n        heroImage={\r\n          pageData.elements.hero_image.value.length > 0\r\n            ? pageData.elements.hero_image.value[0]\r\n            : undefined\r\n        }\r\n      />\r\n      <div className=\"content\">\r\n        {categories.length > 0 && (\r\n          <div className=\"inner\">\r\n            <header className=\"major\">\r\n              <h2>Categories</h2>\r\n              <ul className=\"categories\">{categoriesComponents}</ul>\r\n            </header>\r\n          </div>\r\n        )}\r\n        <section className=\"tiles\">{listingOverview}</section>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query listingQuery(\r\n    $language: String!\r\n    $codename: String!\r\n    $listTypes: [String]!\r\n  ) {\r\n    kontentItemListingPage(\r\n      preferred_language: { eq: $language }\r\n      system: { codename: { eq: $codename } }\r\n    ) {\r\n      elements {\r\n        primary_text {\r\n          value\r\n        }\r\n        secondary_text {\r\n          value\r\n        }\r\n        hero_image {\r\n          value {\r\n            name\r\n            url\r\n            width\r\n            height\r\n            description\r\n          }\r\n        }\r\n        listing_page_options__list_types {\r\n          value\r\n        }\r\n      }\r\n    }\r\n    allKontentItem(filter: { system: { type: { in: $listTypes } } }) {\r\n      nodes {\r\n        __typename\r\n        system {\r\n          id\r\n          codename\r\n        }\r\n        ... on kontent_item_gotcha {\r\n          elements {\r\n            title {\r\n              value\r\n            }\r\n            url_slug {\r\n              value\r\n            }\r\n            image {\r\n              value {\r\n                url\r\n              }\r\n            }\r\n            summary {\r\n              value\r\n            }\r\n            channel_purpose {\r\n              value {\r\n                codename\r\n              }\r\n            }\r\n            listing_category {\r\n              value {\r\n                name\r\n                codename\r\n              }\r\n            }\r\n          }\r\n        }\r\n        ... on kontent_item_project {\r\n          elements {\r\n            title {\r\n              value\r\n            }\r\n            url_slug {\r\n              value\r\n            }\r\n            release_date {\r\n              value\r\n            }\r\n            image {\r\n              value {\r\n                url\r\n              }\r\n            }\r\n            summary {\r\n              value\r\n            }\r\n            channel_purpose {\r\n              value {\r\n                codename\r\n              }\r\n            }\r\n            listing_category {\r\n              value {\r\n                name\r\n                codename\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default ListingPage\r\n"],"names":["props","React","id","itemId","className","Math","floor","random","heroImage","ImageElement","image","style","position","left","top","width","height","imgStyle","objectPosition","titleCodename","title","dangerouslySetInnerHTML","__html","content","contentCodename","button","Link","to","_ref","item","__typename","key","elements","url_slug","value","system","backgroundImage","length","url","summary","backgroundOpacity","categorySuits","selectedCategories","itemCategories","_toConsumableArray","filter","category","includes","data","kontentItemListingPage","pageData","allKontentItem","listingData","setSelectedCategories","useState","Set","gotchas","nodes","node","channel_purpose","map","i","codename","projects","items","concat","allCategories","itemCategory","listing_category","listingOverview","size","c","ListingItem","categories","Object","values","categoriesComponents","has","onClick","result","delete","add","name","unshift","Layout","BannerLanding","primary_text","secondary_text","hero_image","undefined"],"sourceRoot":""}