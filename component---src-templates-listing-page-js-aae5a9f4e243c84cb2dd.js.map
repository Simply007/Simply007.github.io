{"version":3,"file":"component---src-templates-listing-page-js-aae5a9f4e243c84cb2dd.js","mappings":"uPAqFA,MAlFoBA,IAAe,IAAd,KAAEC,GAAMD,EAG3B,OAFiBC,EAAKC,YAGpB,IAAK,sBACH,OACEC,EAAAA,cAAA,WACEC,IAAKH,EAAKI,SAASC,SAASC,MAC5B,uBAAsBN,EAAKO,OAAOC,GAClCC,MAAO,CACLC,gBACEV,EAAKI,SAASO,OAASX,EAAKI,SAASO,MAAML,MAAMM,OAAS,EACtD,QAAQZ,EAAKI,SAASO,MAAML,MAAM,GAAGO,QACrC,YAGRX,EAAAA,cAAA,UAAQY,UAAU,SAChBZ,EAAAA,cAAA,MAAI,gCAA8B,SAC/BF,EAAKI,SAASW,MAAMT,OAEvBJ,EAAAA,cAAA,KAAGY,UAAU,GAAG,gCAA8B,aAC3C,IAAIE,KACHhB,EAAKI,SAASa,UAAUX,OACxBY,gBACJhB,EAAAA,cAAA,OACEiB,wBAAyB,CAAEC,OAAQpB,EAAKI,SAASiB,QAAQf,OACzD,gCAA8B,UAC9BQ,UAAU,YAEZZ,EAAAA,cAAA,MAAIY,UAAU,WACZZ,EAAAA,cAAA,UACEA,EAAAA,cAACoB,EAAAA,KAAI,CAACR,UAAU,cAAcS,GAAIvB,EAAKI,SAASC,SAASC,OAAO,kBAS5E,IAAK,uBACH,OACEJ,EAAAA,cAAA,WACEC,IAAKH,EAAKI,SAASC,SAASC,MAC5B,uBAAsBN,EAAKO,OAAOC,GAClCC,MAAO,CACLC,gBACEV,EAAKI,SAASO,OAASX,EAAKI,SAASO,MAAML,MAAMM,OAAS,EACtD,QAAQZ,EAAKI,SAASO,MAAML,MAAM,GAAGO,QACrC,UACNW,kBAAmB,QAGrBtB,EAAAA,cAAA,UAAQY,UAAU,SAChBZ,EAAAA,cAAA,MAAI,gCAA8B,SAC/BF,EAAKI,SAASW,MAAMT,OAEvBJ,EAAAA,cAAA,KAAGY,UAAU,GAAG,gCAA8B,gBAC3C,IAAIE,KACHhB,EAAKI,SAASqB,aAAanB,OAC3BY,gBACJhB,EAAAA,cAAA,OACEiB,wBAAyB,CAAEC,OAAQpB,EAAKI,SAASiB,QAAQf,OACzD,gCAA8B,UAC9BQ,UAAU,YAEZZ,EAAAA,cAAA,MAAIY,UAAU,WACZZ,EAAAA,cAAA,UACEA,EAAAA,cAACoB,EAAAA,KAAI,CAACR,UAAU,cAAcS,GAAIvB,EAAKI,SAASC,SAASC,OAAO,kBAW9E,ECvEF,MAAMoB,EAAgBA,CAACC,EAAoBC,KAEvCC,EAAAA,EAAAA,GAAIF,GAAoBG,QAAQC,GAC9BH,EAAeI,SAASD,KACxBnB,OAAS,EAITqB,EAAoBjC,GACH,yBAApBA,EAAKC,YAAyCD,EAAKI,SAASqB,aAAanB,OAClD,wBAApBN,EAAKC,YAAwCD,EAAKI,SAASa,UAAUX,MA0O3E,MAvOoBP,IAEb,IADLmC,MAAQC,uBAAwBC,EAAUC,eAAgBC,IAC3DvC,EACC,MAAM,EAAC4B,EAAmB,EAACY,IAAyBC,EAAAA,EAAAA,UAAS,IAAIC,KAE3DC,EAAUJ,EAAYK,MAAMb,QAC/Bc,GACqB,wBAApBA,EAAK3C,YACL2C,EAAKxC,SAASyC,gBAAgBvC,MAC3BwC,KAAKC,GAAMA,EAAEC,WACbhB,SAAS,aAGViB,EAAWX,EAAYK,MAAMb,QAChCc,GACqB,yBAApBA,EAAK3C,YACL2C,EAAKxC,SAASyC,gBAAgBvC,MAC3BwC,KAAKC,GAAMA,EAAEC,WACbhB,SAAS,aAGVkB,EAAQR,EAAQS,OAAOF,GAEvBG,EAAgB,CAAC,EACvB,IAAK,MAAMpD,KAAQkD,EACjB,IAAK,MAAMG,KAAgBrD,EAAKI,SAASkD,iBAAiBhD,MACxD8C,EAAcC,EAAaL,UAAYK,EAI3C,MASME,EATWL,EAAMpB,QAAQ9B,GACD,IAA5B2B,EAAmB6B,MAEf9B,EACAC,EACA3B,EAAKI,SAASkD,iBAAiBhD,MAAMwC,KAAKW,GAAMA,EAAET,cAKrDlB,QAAQ9B,GACqB,IAA5B2B,EAAmB6B,MAEf9B,EACAC,EACA3B,EAAKI,SAASkD,iBAAiBhD,MAAMwC,KAAKW,GAAMA,EAAET,cAGvDU,MAAK,CAACC,EAAGC,KACR,MAAMC,EAAO5B,EAAiB0B,GACxBG,EAAQ7B,EAAiB2B,GAE/B,OAAIC,GAAQC,EACH,IAAI9C,KAAK8C,GAAS,IAAI9C,KAAK6C,GAG3B,CAAC,IAEXf,KAAK9C,GAASE,EAAAA,cAAC6D,EAAW,CAAC5D,IAAKH,EAAKO,OAAOyC,SAAUhD,KAAMA,MAEzDgE,EAAaC,OAAOC,OAAOd,GAC3Be,EAAuBH,EAAWlB,KAAKf,GAC3C7B,EAAAA,cAAA,MAAIC,IAAK4B,EAASiB,UAChB9C,EAAAA,cAAA,UACEY,UAAW,UAASa,EAAmByC,IAAIrC,EAASiB,UAAY,UAAY,IAE5E,yBAAwBjB,EAASiB,SACjCqB,QAASA,IACP9B,GAAuBZ,IACrB,GAAIA,EAAmByC,IAAIrC,EAASiB,UAAW,CAC7C,MAAMsB,EAAS,IAAI7B,IAAId,GAEvB,OADA2C,EAAOC,OAAOxC,EAASiB,UAChBsB,CACT,CACE,OAAO,IAAI7B,IAAId,EAAmB6C,IAAIzC,EAASiB,UACjD,KAIHjB,EAAS0C,SAmBhB,OAdAN,EAAqBO,QACnBxE,EAAAA,cAAA,MAAIC,IAAI,QACND,EAAAA,cAAA,UACEmE,QAASA,IAAM9B,EAAsB,IAAIE,KACzC3B,UAAW,UAAqC,IAA5Ba,EAAmB6B,KACnC,mBACA,0BAGyB,IAA5B7B,EAAmB6B,KAAa,MAAQ,WAM7CtD,EAAAA,cAACyE,EAAAA,EAAM,KACLzE,EAAAA,cAAC0E,EAAAA,EAAa,CACZ7D,MAAOqB,EAAShC,SAASyE,aAAavE,MACtCwE,QAAS1C,EAAShC,SAAS2E,eAAezE,MAC1C0E,UACE5C,EAAShC,SAAS6E,WAAW3E,MAAMM,OAAS,EACxCwB,EAAShC,SAAS6E,WAAW3E,MAAM,QACnC4E,IAGRhF,EAAAA,cAAA,OAAKY,UAAU,WACZkD,EAAWpD,OAAS,GACnBV,EAAAA,cAAA,OAAKY,UAAU,SACbZ,EAAAA,cAAA,UAAQY,UAAU,SAChBZ,EAAAA,cAAA,UAAI,cACJA,EAAAA,cAAA,MAAIY,UAAU,cAAcqD,KAIlCjE,EAAAA,cAAA,WAASY,UAAU,SAASyC,IAEvB,C,yDC7Fb,IA/CuB4B,GACrBjF,EAAAA,cAAA,WACEM,GAAG,SACH,uBAAsB2E,EAAMC,OAC5BtE,UAAW,QAAQuE,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,KAElDJ,EAAMH,WACL9E,EAAAA,cAACsF,EAAAA,GAAY,CACX7E,MAAOwE,EAAMH,UACbvE,MAAO,CACLgF,SAAU,WACV5B,KAAM,EACN6B,IAAK,EACLC,MAAO,OACPC,OAAQ,QAEVC,SAAU,CACRC,eAAgB,aAKtB5F,EAAAA,cAAA,OAAKY,UAAU,SACbZ,EAAAA,cAAA,UAAQY,UAAU,SAChBZ,EAAAA,cAAA,MAAI,gCAA+BiF,EAAMY,eACtCZ,EAAMpE,QAGXb,EAAAA,cAAA,OACEY,UAAU,UACVK,wBAAyB,CAAEC,OAAQ+D,EAAML,SACzC,gCAA+BK,EAAMa,kBAEtCb,EAAMc,QACL/F,EAAAA,cAAA,OAAKY,UAAU,WACbZ,EAAAA,cAACoB,EAAAA,KAAI,CACHR,UAAU,mCACVS,GAAI4D,EAAMc,OAAO1E,IAEhB4D,EAAMc,OAAOlF,S","sources":["webpack://ondrej-chrastina-personal-site/./src/components/ListingItem.js","webpack://ondrej-chrastina-personal-site/./src/templates/listing-page.js","webpack://ondrej-chrastina-personal-site/./src/components/BannerLanding.js"],"sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nconst ListingItem = ({ item }) => {\n  const itemType = item.__typename\n\n  switch (itemType) {\n    case 'kontent_item_gotcha':\n      return (\n        <article\n          key={item.elements.url_slug.value}\n          data-kontent-item-id={item.system.id}\n          style={{\n            backgroundImage:\n              item.elements.image && item.elements.image.value.length > 0\n                ? `url(\"${item.elements.image.value[0].url}\")`\n                : 'initial',\n          }}\n        >\n          <header className=\"major\">\n            <h3 data-kontent-element-codename=\"title\">\n              {item.elements.title.value}\n            </h3>\n            <i className='' data-kontent-element-codename=\"post_date\">\n              {new Date(\n                item.elements.post_date.value\n              ).toDateString()}</i>\n            <div\n              dangerouslySetInnerHTML={{ __html: item.elements.summary.value }}\n              data-kontent-element-codename=\"summary\"\n              className=\"summary\"\n            />\n            <ul className=\"actions\">\n              <li>\n                <Link className=\"button next\" to={item.elements.url_slug.value}>\n                  Learn more\n                </Link>\n              </li>\n            </ul>\n          </header>\n        </article>\n      )\n\n    case 'kontent_item_project': {\n      return (\n        <article\n          key={item.elements.url_slug.value}\n          data-kontent-item-id={item.system.id}\n          style={{\n            backgroundImage:\n              item.elements.image && item.elements.image.value.length > 0\n                ? `url(\"${item.elements.image.value[0].url}\")`\n                : 'initial',\n            backgroundOpacity: '0.2',\n          }}\n        >\n          <header className=\"major\">\n            <h3 data-kontent-element-codename=\"title\">\n              {item.elements.title.value}\n            </h3>\n            <i className='' data-kontent-element-codename=\"release_date\">\n              {new Date(\n                item.elements.release_date.value\n              ).toDateString()}</i>\n            <div\n              dangerouslySetInnerHTML={{ __html: item.elements.summary.value }}\n              data-kontent-element-codename=\"summary\"\n              className=\"summary\"\n            />\n            <ul className=\"actions\">\n              <li>\n                <Link className=\"button next\" to={item.elements.url_slug.value}>\n                  Learn more\n                </Link>\n              </li>\n            </ul>\n          </header>\n        </article>\n      )\n    }\n    default:\n      break\n  }\n}\n\nexport default ListingItem\n","import React, { useState } from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport BannerLanding from '../components/BannerLanding'\nimport ListingItem from '../components/ListingItem'\n\n/**\n * Check if there is an intersect in the following Set and array\n * @param {Set<String>} selectedCategories - selected categories\n * @param {Array<String>} itemCategories - categories you want to verify against\n */\nconst categorySuits = (selectedCategories, itemCategories) => {\n  return (\n    [...selectedCategories].filter((category) =>\n      itemCategories.includes(category)\n    ).length > 0\n  )\n}\n\nconst getPostItemValue = (item) => (\n  (item.__typename === 'kontent_item_project' && item.elements.release_date.value)\n  || (item.__typename === 'kontent_item_gotcha' && item.elements.post_date.value)\n);\n\nconst ListingPage = ({\n  data: { kontentItemListingPage: pageData, allKontentItem: listingData },\n}) => {\n  const [selectedCategories, setSelectedCategories] = useState(new Set())\n\n  const gotchas = listingData.nodes.filter(\n    (node) =>\n      node.__typename === 'kontent_item_gotcha' &&\n      node.elements.channel_purpose.value\n        .map((i) => i.codename)\n        .includes('website')\n  )\n\n  const projects = listingData.nodes.filter(\n    (node) =>\n      node.__typename === 'kontent_item_project' &&\n      node.elements.channel_purpose.value\n        .map((i) => i.codename)\n        .includes('website')\n  )\n\n  const items = gotchas.concat(projects)\n\n  const allCategories = {}\n  for (const item of items) {\n    for (const itemCategory of item.elements.listing_category.value) {\n      allCategories[itemCategory.codename] = itemCategory\n    }\n  }\n\n  const allItems = items.filter((item) =>\n    selectedCategories.size === 0\n      ? true\n      : categorySuits(\n        selectedCategories,\n        item.elements.listing_category.value.map((c) => c.codename)\n      )\n  )\n\n  const listingOverview = allItems\n    .filter((item) =>\n      selectedCategories.size === 0\n        ? true\n        : categorySuits(\n          selectedCategories,\n          item.elements.listing_category.value.map((c) => c.codename)\n        )\n    )\n    .sort((a, b) => {\n      const left = getPostItemValue(a);\n      const right = getPostItemValue(b);\n\n      if (left && right) {\n        return new Date(right) - new Date(left)\n      }\n      else\n        return 0;\n    })\n    .map((item) => <ListingItem key={item.system.codename} item={item} />)\n\n  const categories = Object.values(allCategories)\n  const categoriesComponents = categories.map((category) => (\n    <li key={category.codename}>\n      <button\n        className={`button${selectedCategories.has(category.codename) ? ' toggle' : ''\n          }`}\n        data-category-codename={category.codename}\n        onClick={() =>\n          setSelectedCategories((selectedCategories) => {\n            if (selectedCategories.has(category.codename)) {\n              const result = new Set(selectedCategories)\n              result.delete(category.codename)\n              return result\n            } else {\n              return new Set(selectedCategories.add(category.codename))\n            }\n          })\n        }\n      >\n        {category.name}\n      </button>\n    </li>\n  ))\n\n  categoriesComponents.unshift(\n    <li key=\"#ALL\">\n      <button\n        onClick={() => setSelectedCategories(new Set())}\n        className={`button${selectedCategories.size === 0\n          ? ' disabled toggle'\n          : ' icon fa-times-circle'\n          }`}\n      >\n        {selectedCategories.size === 0 ? 'ALL' : 'CLEAR'}\n      </button>\n    </li>\n  )\n\n  return (\n    <Layout>\n      <BannerLanding\n        title={pageData.elements.primary_text.value}\n        content={pageData.elements.secondary_text.value}\n        heroImage={\n          pageData.elements.hero_image.value.length > 0\n            ? pageData.elements.hero_image.value[0]\n            : undefined\n        }\n      />\n      <div className=\"content\">\n        {categories.length > 0 && (\n          <div className=\"inner\">\n            <header className=\"major\">\n              <h2>Categories</h2>\n              <ul className=\"categories\">{categoriesComponents}</ul>\n            </header>\n          </div>\n        )}\n        <section className=\"tiles\">{listingOverview}</section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query listingQuery(\n    $language: String!\n    $codename: String!\n    $listTypes: [String]!\n  ) {\n    kontentItemListingPage(\n      preferred_language: { eq: $language }\n      system: { codename: { eq: $codename } }\n    ) {\n      elements {\n        primary_text {\n          value\n        }\n        secondary_text {\n          value\n        }\n        hero_image {\n          value {\n            name\n            url\n            width\n            height\n            description\n          }\n        }\n        listing_page_options__list_types {\n          value\n        }\n      }\n    }\n    allKontentItem(filter: { system: { type: { in: $listTypes } } }) {\n      nodes {\n        __typename\n        system {\n          id\n          codename\n        }\n        ... on kontent_item_gotcha {\n          elements {\n            title {\n              value\n            }\n            url_slug {\n              value\n            }\n            image {\n              value {\n                url\n              }\n            }\n            summary {\n              value\n            }\n            post_date {\n              value\n            }\n            channel_purpose {\n              value {\n                codename\n              }\n            }\n            listing_category {\n              value {\n                name\n                codename\n              }\n            }\n          }\n        }\n        ... on kontent_item_project {\n          elements {\n            title {\n              value\n            }\n            url_slug {\n              value\n            }\n            release_date {\n              value\n            }\n            image {\n              value {\n                url\n              }\n            }\n            summary {\n              value\n            }\n            channel_purpose {\n              value {\n                codename\n              }\n            }\n            listing_category {\n              value {\n                name\n                codename\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default ListingPage\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { ImageElement } from '@kontent-ai/gatsby-components'\n\nconst BannerLanding = (props) => (\n  <section\n    id=\"banner\"\n    data-kontent-item-id={props.itemId}\n    className={`style${Math.floor(Math.random() * 6) + 1}`}\n  >\n    {props.heroImage && (\n      <ImageElement\n        image={props.heroImage}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          width: '100%',\n          height: '100%',\n        }}\n        imgStyle={{\n          objectPosition: '75% 25%',\n        }}\n      />\n    )}\n\n    <div className=\"inner\">\n      <header className=\"major\">\n        <h1 data-kontent-element-codename={props.titleCodename}>\n          {props.title}\n        </h1>\n      </header>\n      <div\n        className=\"content\"\n        dangerouslySetInnerHTML={{ __html: props.content }}\n        data-kontent-element-codename={props.contentCodename}\n      ></div>\n      {props.button && (\n        <div className=\"content\">\n          <Link\n            className=\"button icon fa-angle-double-left\"\n            to={props.button.to}\n          >\n            {props.button.title}\n          </Link>\n        </div>\n      )}\n    </div>\n  </section>\n)\n\nexport default BannerLanding\n"],"names":["_ref","item","__typename","React","key","elements","url_slug","value","system","id","style","backgroundImage","image","length","url","className","title","Date","post_date","toDateString","dangerouslySetInnerHTML","__html","summary","Link","to","backgroundOpacity","release_date","categorySuits","selectedCategories","itemCategories","_toConsumableArray","filter","category","includes","getPostItemValue","data","kontentItemListingPage","pageData","allKontentItem","listingData","setSelectedCategories","useState","Set","gotchas","nodes","node","channel_purpose","map","i","codename","projects","items","concat","allCategories","itemCategory","listing_category","listingOverview","size","c","sort","a","b","left","right","ListingItem","categories","Object","values","categoriesComponents","has","onClick","result","delete","add","name","unshift","Layout","BannerLanding","primary_text","content","secondary_text","heroImage","hero_image","undefined","props","itemId","Math","floor","random","ImageElement","position","top","width","height","imgStyle","objectPosition","titleCodename","contentCodename","button"],"sourceRoot":""}