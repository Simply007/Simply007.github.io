{"version":3,"sources":["webpack:///./src/templates/listing-page.js","webpack:///./src/components/BannerLanding.js"],"names":["query","ListingPage","data","pageData","kontentItemListingPage","listingData","allKontentItem","categories","useState","Set","selectedCategories","setSelectedCategories","journalOverview","nodes","filter","node","__typename","elements","channel_purpose","value","map","i","codename","includes","gotcha","size","itemCategories","category","length","categorySuits","listing_category","c","item","key","url_slug","className","title","dangerouslySetInnerHTML","__html","summary","to","categoriesComponents","terms","has","data-category-codename","onClick","result","delete","add","name","unshift","primary_text","content","secondary_text","BannerLanding","props","id"],"mappings":"kNAwHaA,EAAK,aA4DHC,UAlKK,SAAC,GAMd,IAAD,IALJC,KAC0BC,EAItB,EAJFC,uBACgBC,EAGd,EAHFC,eACAC,EAEE,EAFFA,WAEE,EACgDC,mBAAS,IAAIC,KAA1DC,EADH,KACuBC,EADvB,KAWEC,EARUP,EAAYQ,MAAMC,QAChC,SAAAC,GAAI,MACkB,wBAApBA,EAAKC,YACLD,EAAKE,SAASC,gBAAgBC,MAC3BC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,YACXC,SAAS,cAIbT,QAAO,SAAAU,GAAM,OACgB,IAA5Bd,EAAmBe,MA3BH,SAACf,EAAoBgB,GACzC,OACE,YAAIhB,GAAoBI,QAAO,SAAAa,GAAQ,OACrCD,EAAeH,SAASI,MACxBC,OAAS,EAyBLC,CACEnB,EACAc,EAAOP,SAASa,iBAAiBX,MAAMC,KAAI,SAAAW,GAAC,OAAIA,EAAET,gBAGzDF,KAAI,SAAAY,GAAI,OACP,6BAASC,IAAKD,EAAKf,SAASiB,SAASf,OACnC,4BAAQgB,UAAU,SAChB,4BAAKH,EAAKf,SAASmB,MAAMjB,OACzB,uBACEkB,wBAAyB,CAAEC,OAAQN,EAAKf,SAASsB,QAAQpB,SAE3D,wBAAIgB,UAAU,WACZ,4BACE,kBAAC,OAAD,CAAMA,UAAU,SAASK,GAAIR,EAAKf,SAASiB,SAASf,OAApD,qBASNsB,EAAuBlC,EAAWmC,MAAMtB,KAAI,SAAAO,GAAQ,OACxD,wBACEM,IAAKN,EAASL,SACda,UAAS,UACPzB,EAAmBiC,IAAIhB,EAASL,UAAY,UAAY,IAE1DsB,yBAAwBjB,EAASL,SACjCuB,QAAS,kBACPlC,GAAsB,SAAAD,GACpB,GAAIA,EAAmBiC,IAAIhB,EAASL,UAAW,CAC7C,IAAMwB,EAAS,IAAIrC,IAAIC,GAEvB,OADAoC,EAAOC,OAAOpB,EAASL,UAChBwB,EAEP,OAAO,IAAIrC,IAAIC,EAAmBsC,IAAIrB,EAASL,gBAKpDK,EAASsB,SAkBd,OAdAR,EAAqBS,QACnB,wBACEjB,IAAI,OACJY,QAAS,kBAAMlC,EAAsB,IAAIF,MACzC0B,UAAS,UACqB,IAA5BzB,EAAmBe,KACf,mBACA,0BAGuB,IAA5Bf,EAAmBe,KAAa,MAAQ,UAK3C,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEW,MAAOjC,EAASc,SAASkC,aAAahC,MACtCiC,QAASjD,EAASc,SAASoC,eAAelC,QAE5C,yBAAKgB,UAAU,WACb,yBAAKA,UAAU,SACb,4BAAQA,UAAU,SAChB,0CACC5B,EAAWmC,MAAMd,OAAS,GACzB,wBAAIO,UAAU,cAAcM,KAIlC,6BAASN,UAAU,SAASvB,O,kCClHpC,yBAgBe0C,IAdO,SAAAC,GAAK,OACzB,6BAASC,GAAG,SAASrB,UAAU,UAC7B,yBAAKA,UAAU,SACb,4BAAQA,UAAU,SAChB,4BAAKoB,EAAMnB,QAEb,yBACED,UAAU,UACVE,wBAAyB,CAAEC,OAAQiB,EAAMH","file":"component---src-templates-listing-page-js-ea340f3de5eb76dc4944.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { graphql, Link } from 'gatsby'\r\nimport Layout from '../components/layout'\r\nimport BannerLanding from '../components/BannerLanding'\r\n\r\n/**\r\n * Check if there is an intersect in the following Set and array\r\n * @param {Set<String>} selectedCategories - selected categories\r\n * @param {Array<String>} itemCategories - categories you want to verify against\r\n */\r\nconst categorySuits = (selectedCategories, itemCategories) => {\r\n  return (\r\n    [...selectedCategories].filter(category =>\r\n      itemCategories.includes(category)\r\n    ).length > 0\r\n  )\r\n}\r\n\r\nconst ListingPage = ({\r\n  data: {\r\n    kontentItemListingPage: pageData,\r\n    allKontentItem: listingData,\r\n    categories,\r\n  },\r\n}) => {\r\n  const [selectedCategories, setSelectedCategories] = useState(new Set())\r\n\r\n  const gotchas = listingData.nodes.filter(\r\n    node =>\r\n      node.__typename === 'kontent_item_gotcha' &&\r\n      node.elements.channel_purpose.value\r\n        .map(i => i.codename)\r\n        .includes('website')\r\n  )\r\n\r\n  const journalOverview = gotchas\r\n    .filter(gotcha =>\r\n      selectedCategories.size === 0\r\n        ? true\r\n        : categorySuits(\r\n            selectedCategories,\r\n            gotcha.elements.listing_category.value.map(c => c.codename)\r\n          )\r\n    )\r\n    .map(item => (\r\n      <article key={item.elements.url_slug.value}>\r\n        <header className=\"major\">\r\n          <h3>{item.elements.title.value}</h3>\r\n          <p\r\n            dangerouslySetInnerHTML={{ __html: item.elements.summary.value }}\r\n          />\r\n          <ul className=\"actions\">\r\n            <li>\r\n              <Link className=\"button\" to={item.elements.url_slug.value}>\r\n                Learn more\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </header>\r\n      </article>\r\n    ))\r\n\r\n  const categoriesComponents = categories.terms.map(category => (\r\n    <li\r\n      key={category.codename}\r\n      className={`button${\r\n        selectedCategories.has(category.codename) ? ' toggle' : ''\r\n      }`}\r\n      data-category-codename={category.codename}\r\n      onClick={() =>\r\n        setSelectedCategories(selectedCategories => {\r\n          if (selectedCategories.has(category.codename)) {\r\n            const result = new Set(selectedCategories)\r\n            result.delete(category.codename)\r\n            return result\r\n          } else {\r\n            return new Set(selectedCategories.add(category.codename))\r\n          }\r\n        })\r\n      }\r\n    >\r\n      {category.name}\r\n    </li>\r\n  ))\r\n\r\n  categoriesComponents.unshift(\r\n    <li\r\n      key=\"#ALL\"\r\n      onClick={() => setSelectedCategories(new Set())}\r\n      className={`button${\r\n        selectedCategories.size === 0\r\n          ? ' disabled toggle'\r\n          : ' icon fa-times-circle'\r\n      }`}\r\n    >\r\n      {selectedCategories.size === 0 ? 'ALL' : 'CLEAR'}\r\n    </li>\r\n  )\r\n\r\n  return (\r\n    <Layout>\r\n      <BannerLanding\r\n        title={pageData.elements.primary_text.value}\r\n        content={pageData.elements.secondary_text.value}\r\n      />\r\n      <div className=\"content\">\r\n        <div className=\"inner\">\r\n          <header className=\"major\">\r\n            <h2>My Gotchas</h2>\r\n            {categories.terms.length > 0 && (\r\n              <ul className=\"categories\">{categoriesComponents}</ul>\r\n            )}\r\n          </header>\r\n        </div>\r\n        <section className=\"tiles\">{journalOverview}</section>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query listingQuery(\r\n    $language: String!\r\n    $codename: String!\r\n    $listTypes: [String]!\r\n  ) {\r\n    kontentItemListingPage(\r\n      preferred_language: { eq: $language }\r\n      system: { codename: { eq: $codename } }\r\n    ) {\r\n      elements {\r\n        primary_text {\r\n          value\r\n        }\r\n        secondary_text {\r\n          value\r\n        }\r\n        list_types {\r\n          value\r\n        }\r\n      }\r\n    }\r\n    allKontentItem(filter: { system: { type: { in: $listTypes } } }) {\r\n      nodes {\r\n        ... on kontent_item_gotcha {\r\n          elements {\r\n            title {\r\n              value\r\n            }\r\n            url_slug {\r\n              value\r\n            }\r\n            summary {\r\n              value\r\n            }\r\n            channel_purpose {\r\n              value {\r\n                codename\r\n              }\r\n            }\r\n            listing_category {\r\n              value {\r\n                codename\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    categories: kontentTaxonomy(\r\n      system: { codename: { eq: \"listing_category\" } }\r\n    ) {\r\n      terms {\r\n        name\r\n        codename\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default ListingPage\r\n","import React from 'react'\n\nconst BannerLanding = props => (\n  <section id=\"banner\" className=\"style2\">\n    <div className=\"inner\">\n      <header className=\"major\">\n        <h1>{props.title}</h1>\n      </header>\n      <div\n        className=\"content\"\n        dangerouslySetInnerHTML={{ __html: props.content }}\n      ></div>\n    </div>\n  </section>\n)\n\nexport default BannerLanding\n"],"sourceRoot":""}